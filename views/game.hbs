<style>
    table#sudoku_grid {
        width: 100%;
        background-color: white;
    }

    table#sudoku_grid tr,
    table#sudoku_grid td {
        border: 1px solid #000;
        text-align: center;
        font-size: 18pt;
        font-weight: bold;
    }

    @media only screen and (max-width: 600px) {

        table#sudoku_grid tr,
        table#sudoku_grid td {
            font-size: 12pt;
        }
    }

    table#sudoku_grid td {
        width: 11.1%;
        padding-top: 2.5%;
        padding-bottom: 2.5%;
        vertical-align: middle;
    }

    .selected {
        background-color: #6FFFE9;
    }

    .wrong {
        background-color: red;
    }

    .given {
        background-color: lightgray;
    }

    button {
        width: 2em;
    }

    #check_answers {
        width: 6em;
    }
</style>

<main class="gameBackground">

    <h1 class="gameTitle">Good Luck!</h1>

    <div class="container" style="align-content: center;">
    </div>

    <br>
    <div class="gameBoard">
        <div id="game" class="container gameBoard" style="text-align: center;">
            <table id="sudoku_grid"></table>
            <br>
            <button class="num">&nbsp;</button>
            <button class="num">1</button>
            <button class="num">2</button>
            <button class="num">3</button>
            <button class="num">4</button>
            <button class="num">5</button>
            <button class="num">6</button>
            <button class="num">7</button>
            <button class="num">8</button>
            <button class="num">9</button><br />
            <button id="check_answers">Check answers (CHEATER!)</button>

            <hr>

            <h1 style="color: #6FFFE9">Ask a question about this puzzle</h1>
            <div class="mb-3">
                <label for="title" class="form-label" style="color: #6FFFE9">Title</label>
                <input type="email" class="form-control" id="title" placeholder="Descritption...">
            </div>
            <div class="mb-3">
                <label for="body" class="form-label" style="color: #6FFFE9">Body</label>
                <textarea class="form-control" id="body" rows="3" placeholder="Additional Details..."></textarea>
            </div>
            <button class="btn btn-secondary" id="submit" style="width: 6em;">Post</button>

        </div>
    </div>




</main>


<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
    let selected = null;
    let currentPuzzle = null;
    let puzzleId = null;
    
    let isGiven = () => {
        if (selected) {
            return selected.className.split(' ').includes('given')
        }
        return false;
    }

    document.addEventListener('click', event => {
        let classList = event.target.className.split(' ');
        if (classList.includes("cell") && !classList.includes("given")) {
            if (selected) selected.className = "cell";

            event.target.className = "cell selected";
            selected = event.target;
        } else if (event.target.className === "num" && selected) {
            if (!isGiven()) {
                
                axios.put(`/api/sudoku/${puzzleId}`, {
                    cellIndex: selected.id,
                    number: parseInt(event.target.innerHTML)
                }).then(res => {
                    selected.innerHTML = event.target.innerHTML;
                    if(res.data.continue == false) {
                        alert("You won!");
                        location = "/mainmenu";
                    }
                }).catch(err => {
                    alert("Invalid move.")
                })

            }
        }
    })

    document.getElementById('check_answers').addEventListener('click', event => {
        for (let i = 0; i < 72; i++) {
            let cell = document.getElementById(i);
            if (cell.innerHTML !== '' && cell.innerHTML !== '&nbsp;') {
                if (cell.innerHTML != currentPuzzle.solution[i]) {
                    cell.className += ' wrong';
                }
            }
        }
    })


    function init() {
        let state = "{{state}}"
        if(state === "new-puzzle") {
            axios.get(`/api/sudoku/new/{{difficulty}}`).then(res => {
                currentPuzzle = res.data;
                puzzleId = res.data.puzzleId;

                let sudoku_grid = document.getElementById('sudoku_grid');

                for (let y = 0; y < 9; y++) {
                    let row = document.createElement('tr');

                    if (y == 2 || y == 5) {
                        row.style.borderBottom = "3px solid #000";
                    }

                    for (let x = 0; x < 9; x++) {
                        let column = document.createElement('td');
                        let index = x + (y * 9);
                        column.id = index;
                        column.className = "cell"
                        if (currentPuzzle.given[index]) {
                            column.className = " given";
                        }
                        if (!currentPuzzle.blank[index]) {
                            column.innerHTML = currentPuzzle.board[index];
                        }

                        if (x == 2 || x == 5) {
                            column.style.borderRight = "3px solid #000";
                        }
                        row.append(column);
                    }
                    sudoku_grid.append(row);
                }

            })
        } else if(state == "load-puzzle") {
            axios.get(`/api/sudoku/{{puzzleId}}`).then(res => {
                currentPuzzle = res.data;
                puzzleId = res.data.puzzleId;

                let sudoku_grid = document.getElementById('sudoku_grid');

                for (let y = 0; y < 9; y++) {
                    let row = document.createElement('tr');

                    if (y == 2 || y == 5) {
                        row.style.borderBottom = "3px solid #000";
                    }

                    for (let x = 0; x < 9; x++) {
                        let column = document.createElement('td');
                        let index = x + (y * 9);
                        column.id = index;
                        column.className = "cell"
                        if (currentPuzzle.given[index]) {
                            column.className = " given";
                        }
                        if (!currentPuzzle.blank[index]) {
                            column.innerHTML = currentPuzzle.board[index];
                        }

                        if (x == 2 || x == 5) {
                            column.style.borderRight = "3px solid #000";
                        }
                        row.append(column);
                    }
                    sudoku_grid.append(row);
                }
            })

        }
        console.log(currentPuzzle)
    }

    init();


    function createPost() {
        let newPost = {
            title: document.getElementById('title').value,
            body: document.getElementById('body').value,
            puzzle: Object.values(currentPuzzle.board)
        }
        axios.post('/api/posts', newPost, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        })
            .then(res => {
                console.log(res)
                location = "/blog"
            })
    }

    document.getElementById("submit").addEventListener('click', event => {
        event.preventDefault()
        createPost()
    })


</script>